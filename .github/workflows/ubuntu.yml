name: Build for Ubuntu
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git curl wget zip cmake pkgconf libqt5widgets5 qtmultimedia5-dev qttools5-dev meson libzstd-dev zlib1g-dev

      - name: Build Gottox/libsqsh
        run: |
           git submodule update --init --recursive
           git clone https://github.com/Gottox/libsqsh
           cd libsqsh
           git checkout v1.0.0
           # sed -i -e 's|=0.57|=0.53|g' meson.build
           meson setup build \
            -Dwerror=false \
            -Dexamples=false  \
            -Dtools=false  \
            -Dcurl=disabled  \
            -Dzlib=enabled \
            -Dlz4=disabled \
            -Dlzma=disabled  \
            -Dzstd=enabled  \
            -Dthreads=enabled \
            -Ddoc=false \
            -Dtest=false
           cd build
           ninja # 'meson build' fails on 20.04, works on 22.04
           sudo meson install
           cd ../../

      - name: Build and package
        run: |
          git submodule update --init --recursive
          mkdir build ; cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          make DESTDIR=. install
          find Filer.app/
          zip --symlinks -r ./Filer_Ubuntu.zip Filer.app/
          cd ..

      - name: Create Debian package
        run: |     
             # Create the 'DEBIAN' directory for package control scripts and metadata
             mkdir -p package/DEBIAN
             # Move the control file to the package/DEBIAN directory
             cp packaging/debian/control package/DEBIAN/control
             # Create the package directory structure
             mkdir -p package/System
             cp -R build/Filer.app package/System/  # Copy Filer.app and its contents to package directory
             # Build the package
             dpkg-deb --build package
    
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: filer-artifact
          
          path: build/Filer_Ubuntu.zip
          
      - name: Create GitHub Release using Continuous Release Manager
        if: github.event_name == 'push'  # Only run for push events, not pull requests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
              curl -L -o continuous-release-manager-linux https://github.com/probonopd/continuous-release-manager/releases/download/continuous/continuous-release-manager-linux
              chmod +x continuous-release-manager-linux
              ./continuous-release-manager-linux
              RELEASE_ID=$(./continuous-release-manager-linux)
              echo "RELEASE_ID=${RELEASE_ID}" >> $GITHUB_ENV

      - name: Upload to GitHub Release
        if: github.event_name == 'push'  # Only run for push events, not pull requests
        uses: xresloader/upload-to-github-release@v1.3.12
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "build/*zip"
          draft: false
          verbose: true
          branches: main
          tag_name: continuous
          release_id: ${{ env.RELEASE_ID }}
